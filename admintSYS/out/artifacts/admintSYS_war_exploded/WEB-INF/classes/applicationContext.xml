<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.lanou.service"></context:component-scan>
    <context:component-scan base-package="com.lanou.mapper"></context:component-scan>

    <!--开启类代理模式，可以在类上使用事务-->
    <tx:annotation-driven proxy-target-class="true"></tx:annotation-driven>

    <!--数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driver}"></property>
        <property name="jdbcUrl" value="${url}"></property>
        <property name="user" value="${uname}"></property>
        <property name="password" value="${password}"></property>
        <!--<property name="maxPoolSize" value="2000"></property>
        <property name="minPoolSize" value="5"></property>-->
    </bean>

    <!--mybatis-spring.jar 中提供的,交给spring创建sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>

    <!--扫描mapper接口的位置-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lanou.mapper"></property>
    </bean>

   <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>-->
    <!--事务管理bean-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--事务切面-->
    <tx:advice id="transactionInterceptor" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
                事务传播
                一个人： 生死自己决定
                两个人：一个人生病类，另外一个人 （健康、传染相同的病，自己生病了）
              事务：
                只有一个事务，没有传播。
                多个事务，事务之间相互调用时，会出现传播行为。
                一个方法调用另外一个方法时，被调用的方法是否使用事务机制？  事务的传播行为
                propagation="REQUIRED"   需要   //支持当前事务，如果不存在，就新建一个
                propagation="NOT_SUPPORTED"  挂起 恢复 //以非事务方式运行，如果有事务存在，挂起当前事务
                propagation="MANDATORY"  强制 //支持当前事务，如果不存在，就抛出异常
                propagation="NESTED" //如果有事务存在，则嵌套事务执行
                propagation="NEVER"  //以非事务方式运行，如果有事务存在，就抛出异常
                propagation="REQUIRES_NEW"  //如果有事务存在，挂起当前事务，创建一个新的事物
                propagation="SUPPORTS"  //支持当前事务，如果不存在，就不使用事务
            -->
            <tx:method name="add*" propagation="REQUIRED" timeout="60000"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="list*" propagation="NOT_SUPPORTED"></tx:method>
            <tx:method name="get*" propagation="NOT_SUPPORTED"></tx:method>
            <tx:method name="load*" propagation="NOT_SUPPORTED"></tx:method>
            <tx:method name="query*" propagation="NOT_SUPPORTED"></tx:method>
            <tx:method name="*" ></tx:method>
        </tx:attributes>
    </tx:advice>

    <!--配置事务切面-->
    <aop:config>
        <!--切入点-->
        <aop:pointcut id="p1" expression="execution(* com.lanou.service.impl.*.*(..))"></aop:pointcut>
        <!--切入点和切面关联-->
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="p1"></aop:advisor>
    </aop:config>
</beans>